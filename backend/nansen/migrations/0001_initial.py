# Generated by Django 5.1.3 on 2025-06-02 19:23

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Equipament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=255)),
                ('description', models.TextField(default=None, max_length=500, null=True)),
                ('power', models.FloatField(default=0)),
                ('tension', models.FloatField(default=0)),
                ('energy_consumption', models.FloatField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('max_consumption', models.FloatField(default=0)),
                ('min_consumption', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Monitoring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='', max_length=255)),
                ('description', models.TextField(max_length=500)),
                ('estimated_consumption', models.FloatField()),
                ('total_consumption', models.FloatField(blank=True, default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('type_mmonitoring', models.CharField(choices=[('Nansenson', 'Nansenson'), ('Nansenic', 'Nansenic')], default='Nansenson', max_length=15)),
                ('is_active', models.BooleanField(default=False)),
                ('is_active_monitoring', models.BooleanField(default=False)),
                ('is_isolado', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=255)),
                ('description', models.TextField(default=None, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('photo', models.ImageField(blank=True, default='product_photos/product-default.png', upload_to='product_photos/')),
            ],
        ),
        migrations.CreateModel(
            name='ProductionLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=255)),
                ('description', models.TextField(default=None, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('value_mensuration_estimated', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ProductLoja',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('image', models.ImageField(upload_to='products/')),
                ('quantity', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Setor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=255)),
                ('description', models.TextField(default=None, max_length=500, null=True)),
                ('estimated_consumption', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TypeSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('LIDER', 'Lider'), ('GAME', 'Game')], default='GAME', max_length=10)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('avatar_url', models.ImageField(default='user_photos/user_default.png', upload_to='product_photos/')),
                ('total_nansen_coins', models.FloatField(default=0)),
                ('total_xp', models.FloatField(default=0)),
                ('nivel', models.IntegerField(default=1)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('productionLine', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.productionline')),
                ('setor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.setor')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
        ),
        migrations.CreateModel(
            name='Compra',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_compra', models.DateTimeField(auto_now_add=True)),
                ('finalizada', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DeviceIotEvent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('tenantId', models.UUIDField()),
                ('tenantName', models.CharField(max_length=100)),
                ('applicationId', models.UUIDField()),
                ('applicationName', models.CharField(max_length=100)),
                ('deviceProfileId', models.UUIDField()),
                ('deviceProfileName', models.CharField(max_length=100)),
                ('deviceName', models.CharField(max_length=100)),
                ('devEui', models.CharField(max_length=16)),
                ('deviceClassEnabled', models.CharField(max_length=10)),
                ('tags', models.JSONField(blank=True, default=dict)),
                ('energia_ativa_kWh', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('tensao_fase_A', models.DecimalField(decimal_places=2, max_digits=6)),
                ('tipo_medidor', models.CharField(max_length=20)),
                ('corrente_fase_B', models.DecimalField(decimal_places=2, max_digits=6)),
                ('tensao_fase_B', models.DecimalField(decimal_places=2, max_digits=6)),
                ('corrente_fase_A', models.DecimalField(decimal_places=2, max_digits=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_sended', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Device Information',
                'verbose_name_plural': 'Devices Information',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['devEui'], name='nansen_devi_devEui_ddcd10_idx'), models.Index(fields=['deviceName'], name='nansen_devi_deviceN_20a735_idx'), models.Index(fields=['created_at'], name='nansen_devi_created_2aec2f_idx')],
            },
        ),
        migrations.CreateModel(
            name='DeviceIot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, max_length=255, null=True)),
                ('is_available', models.CharField()),
                ('type_device', models.TextField(choices=[('Nansenson', 'Nansenson'), ('Nansenic', 'Nansenic')], default='Nansenic', max_length=255)),
                ('deviceName', models.TextField(blank=True, max_length=255, null=True)),
                ('devEui', models.TextField(blank=True, max_length=255, null=True, unique=True)),
                ('equipement', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.equipament')),
            ],
        ),
        migrations.CreateModel(
            name='Mission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('quantity_na', models.FloatField(default=0)),
                ('energy_meta', models.FloatField(default=0)),
                ('nansen_coins', models.FloatField(default=0)),
                ('quantity_xp', models.FloatField(default=0)),
                ('status', models.CharField(choices=[('Pendente', 'Pendente'), ('Em Andamento', 'Em Andamento'), ('Finalizada', 'Finalizada')], default='Pendente', max_length=15)),
                ('date_start', models.DateTimeField()),
                ('date_end', models.DateTimeField()),
                ('order_production', models.IntegerField(default=0)),
                ('quantity_product', models.IntegerField(default=0)),
                ('is_order_production', models.BooleanField(default=False)),
                ('users', models.ManyToManyField(related_name='missions', to=settings.AUTH_USER_MODEL)),
                ('monitoring', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.monitoring')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.product')),
            ],
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('nansen_coins', models.FloatField(default=0)),
                ('quantity_xp', models.FloatField(default=0)),
                ('nivel', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
                ('mission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.mission')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_consumption', models.FloatField()),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField(auto_now_add=True)),
                ('monitoring', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.monitoring')),
            ],
        ),
        migrations.CreateModel(
            name='EquipamentLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('equipament', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.equipament')),
                ('productionLine', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.productionline')),
            ],
        ),
        migrations.AddField(
            model_name='equipament',
            name='production_line',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.productionline'),
        ),
        migrations.CreateModel(
            name='ProductItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=255)),
                ('description', models.TextField(default=None, max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('barcode', models.TextField(default=None, null=True)),
                ('product', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.product')),
            ],
        ),
        migrations.CreateModel(
            name='Mensuration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_mensuration', models.DateTimeField(auto_now_add=True)),
                ('value_mensuration', models.FloatField()),
                ('type_mensuration', models.TextField(max_length=255)),
                ('equipament', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.equipament')),
                ('ProductItem', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.productitem')),
            ],
        ),
        migrations.CreateModel(
            name='ItemCompra',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantidade', models.PositiveIntegerField()),
                ('preco_unitario', models.DecimalField(decimal_places=2, max_digits=10)),
                ('compra', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='itens', to='nansen.compra')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nansen.productloja')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(default='')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='nansen.quiz')),
            ],
        ),
        migrations.CreateModel(
            name='MissionQuiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('mission', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.mission')),
                ('quiz', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.quiz')),
            ],
        ),
        migrations.CreateModel(
            name='ResponseQuiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('is_correct', models.BooleanField(default=False)),
                ('question', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='nansen.question')),
            ],
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(max_length=255)),
                ('points', models.FloatField()),
                ('type_reward', models.CharField(choices=[('TIPO_REWARD_A', 'TIPO_REWARD_A'), ('TIPO_REWARD_B', 'TIPO_REWARD_B')], max_length=100)),
                ('mission', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.mission')),
            ],
        ),
        migrations.CreateModel(
            name='Claim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_claim', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(max_length=255)),
                ('user_claim', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('reward', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.reward')),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=255)),
                ('description', models.TextField(max_length=255, null=True)),
                ('real_consumption', models.FloatField(default=0)),
                ('is_monitored', models.BooleanField(default=False)),
                ('device_iots', models.ManyToManyField(blank=True, null=True, related_name='sections', to='nansen.deviceiot')),
                ('equipament', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sections', to='nansen.equipament')),
                ('monitoring', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.monitoring')),
                ('productionLine', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.productionline')),
                ('secticon_parent', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.section')),
                ('setor', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.setor')),
                ('type_section', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.typesection')),
            ],
        ),
        migrations.CreateModel(
            name='ParametersMinitoring',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True, max_length=255, null=True)),
                ('max_temperature', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('min_temperature', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('max_humidity', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('min_humidity', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('max_luminosity', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('min_luminosity', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('section', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.section')),
            ],
        ),
        migrations.CreateModel(
            name='AssociationIot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_association', models.DateTimeField(auto_now_add=True)),
                ('device_iot', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.deviceiot')),
                ('monitoring', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.monitoring')),
                ('section', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.section')),
            ],
        ),
        migrations.CreateModel(
            name='SectionHistoryMensurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenantId', models.UUIDField(default=None, null=True)),
                ('tenantName', models.CharField(default=None, max_length=100, null=True)),
                ('applicationId', models.UUIDField(default=None, null=True)),
                ('applicationName', models.CharField(default=None, max_length=100, null=True)),
                ('deviceProfileId', models.UUIDField(default=None, null=True)),
                ('deviceProfileName', models.CharField(default=None, max_length=100, null=True)),
                ('deviceName', models.CharField(max_length=100, null=True)),
                ('devEui', models.CharField(max_length=16, null=True)),
                ('deviceClassEnabled', models.CharField(max_length=10, null=True)),
                ('tags', models.JSONField(blank=True, default=dict)),
                ('tensao_fase_A', models.DecimalField(decimal_places=2, max_digits=6, null=True)),
                ('tipo_medidor', models.CharField(max_length=20, null=True)),
                ('corrente_fase_B', models.DecimalField(decimal_places=2, max_digits=6, null=True)),
                ('tensao_fase_B', models.DecimalField(decimal_places=2, max_digits=6, null=True)),
                ('corrente_fase_A', models.DecimalField(decimal_places=2, max_digits=6, null=True)),
                ('energia_ativa_kWh', models.FloatField(default=0)),
                ('interval', models.IntegerField(default=0)),
                ('section', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.section')),
            ],
        ),
        migrations.CreateModel(
            name='ReportEffiency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=255)),
                ('consumption_total', models.FloatField()),
                ('production_total', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('period', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('setor', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.setor')),
            ],
        ),
        migrations.AddField(
            model_name='productionline',
            name='setor',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nansen.setor'),
        ),
        migrations.CreateModel(
            name='UserResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_responses', to='nansen.question')),
                ('selected_response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_responses', to='nansen.responsequiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_responses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MissionProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Pendente', 'Pendente'), ('Em Andamento', 'Em Andamento'), ('Finalizada', 'Finalizada'), ('Falhou', 'Falhou')], default='Pendente', max_length=15)),
                ('current_progress', models.FloatField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(default=None, null=True)),
                ('ended_at', models.DateTimeField(default=None, null=True)),
                ('mission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users_progress', to='nansen.mission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='missions_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'mission')},
            },
        ),
    ]
